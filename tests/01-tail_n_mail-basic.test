#!perl

use 5.006;
use strict;
use warnings;
use Data::Dumper;
use lib 't','.';
use Test::More tests => 34;

use vars qw{ $info $t };

sub run {

	my $conf = shift or die "Must supply a config file!\n";

	my $options = shift || '';

	my $COM = "perl tail_n_mail --dryrun --no-tailnmailrc --offset=0 $conf $options";

	my $result = '';
	eval {
		$result = qx{$COM 2>&1};
	};
	return $@ ? "OOPS: $@\n" : $result;
}

$t = q{Running with non-existent config file gives an error};
$info = run('tests/nosuch.config');
like ($info, qr{Could not open}, $t);

$t = q{Program outputs version information correctly};
my $verinfo = run('--version');
like ($verinfo, qr{^tail_n_mail version [0-9]+\.[0-9]+\.[0-9]+}, $t);
$verinfo =~ /([0-9]+\.[0-9]+\.[0-9]+)/ or die;
my $ver = $1;

$info = run('tests/config/testconfig-tail_n_mail.1');
my $start = substr($info,0,300);
$t = q{Test config 1 gives correct subject line};
my $host = qx{hostname};
chomp $host;
like ($start, qr{^Subject: Acme $host Postgres errors 45 : 60\n}, $t);

$t = q{Test config 1 gives correct bulk email headers};
like ($start, qr{\nAuto-Submitted: auto-generated\nPrecedence: bulk\n}, $t);

$t = q{Test config 1 gives correct version header};
like ($start, qr{\nX-TNM-VERSION: $ver\n}, $t);

$t = q{Test config 1 inserts a 'To' header};
like ($start, qr{\nTo: someone\@example.com\n}, $t);

$t = q{Test config 1 inserts a 'Date' line with newlines before it};
like ($start, qr{\n\n\Date: \w\w\w \w\w\w [0-9 ][0-9]}, $t);

$t = q{Test config 1 inserts a 'Host' line};
like ($start, qr{\nHost: \w}, $t);

$t = q{Test config 1 inserts a 'Unique items' line};
like ($start, qr{\nUnique items: 45\n}, $t);

$t = q{Test config 1 inserts a 'Matches from' line};
like ($start, qr{\nMatches from tests/logs/testlog1.txt: 60\n}, $t);

$t = q{Test config 1 gives a 'DRYRUN' line};
like ($info, qr{DRYRUN: }, $t);

$t = q{Test config 1 gives correct first item match};
$start = substr($info,0,9000);
like ($start, qr{\n\Q[1] (between lines 9,542 and 9,586, occurs 5 times)}, $t);

$t = q{Test config 1 gives correct first item "First" timestamp};
like ($start, qr{\n\QFirst: 2010-12-22 19:17:53 EST [29929]\E\n}, $t);

$t = q{Test config 1 gives correct first item "Last" timestamp};
like ($start, qr{\n\QLast:  2010-12-22 19:17:53 EST [29929]\E\n}, $t);

$t = q{Test config 1 gives correct normalized output};
like ($start, qr{\nERROR: type "line" not yet implemented
\QSTATEMENT: INSERT INTO dbd_pg_test_geom(xline) VALUES (?)\E\n\-\n}, $t);

$t = q{Test config 1 gives correct literal output};
like ($start, qr{\n\-\nERROR: type "line" not yet implemented
\QSTATEMENT: INSERT INTO dbd_pg_test_geom(xline) VALUES (\E\$1\)}, $t);

## Second match is a simple COPY error with a CONTEXT
$t = q{Test config 1 gives correct second match};
$start = substr($info,500,800);
like ($start, qr{\Q
[3] (between lines 8,187 and 8,200, occurs 3 times)
First: 2010-12-22 19:17:41 EST [29896]
Last:  2010-12-22 19:17:41 EST [29896]
ERROR: COPY from stdin failed: COPY terminated by new PQexec
CONTEXT: COPY dbd_pg_test4, line 1
STATEMENT: COPY dbd_pg_test4 FROM STDIN
\E}, $t);

## Third match has a "character X" substitution
$t = q{Test config 1 gives correct third match};
$start = substr($info,600,1000);
like ($start, qr{\Q
[4] (between lines 1,013 and 1,015, occurs 2 times)
First: 2010-12-22 19:17:38 EST [29867]
Last:  2010-12-22 19:17:38 EST [29867]
ERROR: syntax error at or near "?" at character ?
STATEMENT: Testing the ShowErrorStatement attribute
-
ERROR: syntax error at or near "Testing" at character 1
STATEMENT: Testing the ShowErrorStatement attribute
\E}, $t);

## Fifth match has no normalization
$t = q{Test config 1 gives correct fifth match};
$start = substr($info,1300,900);
like ($start, qr{\Q
[6] (between lines 7,093 and 7,526, occurs 2 times)
First: 2010-12-22 19:17:40 EST [29878]
Last:  2010-12-22 19:17:40 EST [29882]
ERROR: column "dbdpg_throws_an_error" does not exist at character 8
STATEMENT: SELECT dbdpg_throws_an_error
\E}, $t);

$info = run('tests/config/testconfig-tail_n_mail.3');
$start = substr($info,0,300);
$t = q{Test config 3 gives correct subject line};
$host = qx{hostname};
chomp $host;
like ($start, qr{^Subject: Acme $host Postgres errors 3 : 5\n}, $t);

$t = q{Test config 3 gives correct first item match};
$start = substr($info,0,800);
like ($start, qr{\n\Q[1] (between lines 236 and 238, occurs 2 times)}, $t);

my $who = 'greg@space-tower.com';
$t = q{Test config 3 gives correct first item "First" timestamp};
like ($start, qr{\n\QFirst: 2012-08-29 11:21:22.327 EDT [32343] $who\E\n}, $t);

$t = q{Test config 3 gives correct first item "Last" timestamp};
like ($start, qr{\n\QLast:  2012-08-29 11:21:22.328 EDT [32343] $who\E\n}, $t);

$t = q{Test config 3 gives correct normalized output};
like ($start, qr{\n\QERROR: syntax error at or near "?" at character ?
STATEMENT: Testing the ShowErrorStatement attribute\E\n\-\n}, $t);

$t = q{Test config 3 gives correct literal output};
like ($start, qr{\n\-\nERROR: syntax error at or near "Testing" at character 1}, $t);

$info = run('tests/config/testconfig-tail_n_mail.4');
$start = substr($info,0,300);
$t = q{Test config 4 gives correct subject line};
$host = qx{hostname};
chomp $host;
## They are the same, but the space in the application name makes it appear otherwise
like ($start, qr{^Subject: Acme $host Postgres errors 2 : 2\n}, $t);

$t = q{Test config 4 gives correct first item match};
$start = substr($info,0,600);
like ($start, qr{\n\Q[1] (from line 13)}, $t);

$t = q{Test config 7 gives correct first item match};
$info = run('tests/config/testconfig-tail_n_mail.7');
$start = substr($info,260,350);
my $expected = q{[1] (from line 138)
[local] [13295] 5ccc4c4d.33ef 2019-05-03 10:12:29.584 EDT [unknown] greg@postgres line:67
ERROR: RAISE EXCEPTION FROM dbdpg_test_error_handler
CONTEXT: PL/pgSQL function dbdpg_test_error_handler(text) line 10 at RAISE
STATEMENT: SELECT * FROM dbdpg_test_error_handler( $1 )};
like ($start, qr{\Q$expected}s, $t);

$t = q{Warning is given for a non-existent log file};
$info = run('tests/config/testconfig-tail_n_mail.8');
$expected = q{!! File was not found: tests/logs/testlog2.txt};
like ($info, qr{\Q$expected}s, $t);

$t = q{Argument 'yesfile' limits which FILE lines are used};
$info = run('tests/config/testconfig-tail_n_mail.8 --yesfile testlog4');
## No matches due to invalid LOG_LINE_PREFIX!
is ($info, q{}, $t);

$t = q{Argument 'yesfile' limits which FILE lines are used};
$info = run('tests/config/testconfig-tail_n_mail.8 --yesfile testlog1');
$expected = q{!! File was not found: tests/logs/testlog2.txt};
unlike ($info, qr{\Q$expected}s, $t);

$t = q{Argument 'nofile' limits which FILE lines are used};
$info = run('tests/config/testconfig-tail_n_mail.8 --nofile "testlog[12]" ');
is ($info, q{}, $t);

$t = q{Argument 'nofile' limits which FILE lines are used};
$info = run('tests/config/testconfig-tail_n_mail.8 --nofile testlog2 ');
$expected = q{!! File was not found: tests/logs/testlog2.txt};
unlike ($info, qr{\Q$expected}s, $t);

$t = q{Argument 'nofile' limits which FILE lines are used - multiple args};
$info = run('tests/config/testconfig-tail_n_mail.8 --nofile testlog1 --nofile testlog2');
is ($info, q{}, $t);

exit;

